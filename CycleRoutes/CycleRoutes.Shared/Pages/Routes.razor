@page "/routes"
@inject IRouteService RouteService
@inject IStreetViewService StreetViewService
@inject IGoogleMapsService GoogleMapsService
@inject IJSRuntime JSRuntime
@implements IDisposable

<PageTitle>Cycle Routes</PageTitle>

<div class="container-fluid">
    <div class="row">
        <div class="@(isRouteManagementCollapsed ? "col-md-1" : "col-md-4") route-management-panel @(isRouteManagementCollapsed ? "collapsed" : "")">
            <div class="card">
                <div class="card-header d-flex justify-content-between align-items-center">
                    <h5 class="mb-0 @(isRouteManagementCollapsed ? "d-none" : "")">Route Management</h5>
                    <button class="btn btn-sm btn-outline-secondary route-management-toggle" @onclick="ToggleRouteManagement" title="@(isRouteManagementCollapsed ? "Expand Panel" : "Collapse Panel")">
                        @if (isRouteManagementCollapsed)
                        {
                            <i class="bi bi-chevron-right" style="transform: scale(1.2);"></i>
                        }
                        else
                        {
                            <i class="bi bi-chevron-left" style="transform: scale(1.2);"></i>
                        }
                    </button>
                </div>                @if (!isRouteManagementCollapsed)
                {
                <div class="card-body">
                    <!-- File Upload -->
                    <div class="mb-3">
                        <label for="gpxFile" class="form-label">Upload GPX File</label>
                        <InputFile OnChange="OnFileSelected" accept=".gpx" class="form-control" id="gpxFile" />
                    </div>

                    @if (isLoading)
                    {
                        <div class="text-center">
                            <div class="spinner-border text-primary" role="status">
                                <span class="visually-hidden">Loading...</span>
                            </div>
                            <p class="mt-2">Loading route...</p>
                        </div>
                    }

                    @if (!string.IsNullOrEmpty(statusMessage))
                    {
                        <div class="alert @(statusMessage.Contains("Error") ? "alert-danger" : "alert-success")" role="alert">
                            @statusMessage
                        </div>
                    }

                    <!-- Saved Routes -->
                    <div class="mb-3">
                        <h6>Saved Routes</h6>
                        @if (savedRoutes.Any())
                        {
                            <div class="list-group">
                                @foreach (var route in savedRoutes)
                                {
                                    <div class="list-group-item d-flex justify-content-between align-items-center">
                                        <div>
                                            <strong>@route.Name</strong><br>
                                            <small class="text-muted">
                                                @((route.TotalDistance / 1000).ToString("F1")) km (@((route.TotalDistance / 1000 * 0.621371).ToString("F1")) mi) ‚Ä¢ @route.Points.Count points
                                            </small>
                                        </div>
                                        <div>
                                            <button class="btn btn-sm btn-primary me-1" @onclick="() => LoadRoute(route)">
                                                Load
                                            </button>
                                            <button class="btn btn-sm btn-danger" @onclick="() => DeleteRoute(route.Name)">
                                                Delete
                                            </button>
                                        </div>
                                    </div>
                                }
                            </div>
                        }
                        else
                        {
                            <p class="text-muted">No saved routes</p>
                        }
                    </div>
                </div>
                }
                else
                {
                    <div class="card-body d-flex flex-column align-items-center justify-content-center text-center py-4" style="min-height: 200px;">
                        <div class="text-muted mb-3" style="writing-mode: vertical-lr; transform: rotate(180deg); letter-spacing: 3px; font-weight: 500; font-size: 0.9rem;">
                            ROUTES
                        </div>
                        <div class="text-muted" style="font-size: 0.8rem; writing-mode: vertical-lr; transform: rotate(180deg);">
                            üìÅ
                        </div>
                    </div>
                }
        </div>

            <!-- Current Route Info -->
            @if (currentRoute != null)
            {
                <div class="card mt-3">
                    <div class="card-header">
                        <h6>Current Route: @currentRoute.Name</h6>
                    </div>
                    <div class="card-body">
                        <p><strong>Distance:</strong> @((currentRoute.TotalDistance / 1000).ToString("F1")) km (@((currentRoute.TotalDistance / 1000 * 0.621371).ToString("F1")) mi)</p>
                        <p><strong>Points:</strong> @currentRoute.Points.Count</p>
                        <p><strong>Est. Duration:</strong> @currentRoute.EstimatedDuration.ToString(@"hh\:mm")</p>
                        
                        @if (currentRoute.Points.Count > 1)
                        {
                            var avgStepDistance = currentRoute.TotalDistance / (currentRoute.Points.Count - 1);
                            <p><strong>Avg Step Distance:</strong> @(avgStepDistance.ToString("F1")) m (@((avgStepDistance * 3.28084).ToString("F1")) ft)</p>
                        }
                        
                        <div class="d-grid gap-2">
                            <button class="btn btn-success" @onclick="StartRoute" disabled="@isNavigating">
                                @if (isNavigating) { <span>Following Route...</span> }
                                else { <span>Start Following Route</span> }
                            </button>
                            @if (isNavigating)
                            {
                                <button class="btn btn-secondary" @onclick="StopRoute">
                                    Stop Following
                                </button>
                            }
                        </div>

                        @if (isNavigating)
                        {
                            <div class="mt-3">
                                <div class="progress clickable-progress" @onclick="OnProgressBarClick" @onclick:preventDefault="true" 
                                     style="cursor: pointer;" title="Click to jump to position">
                                    <div class="progress-bar" role="progressbar" 
                                         style="width: @((double)currentPointIndex / currentRoute.Points.Count * 100)%">
                                        @currentPointIndex / @currentRoute.Points.Count
                                    </div>
                                </div>
                                
                                <!-- Auto-advance settings -->
                                <div class="mt-3 p-3 bg-light rounded">
                                    <h6 class="mb-3">Auto-advance Settings</h6>
                                    <div class="row">
                                        <div class="col-md-6">
                                            <label for="autoAdvanceInterval" class="form-label">Interval (seconds)</label>
                                            <input type="number" class="form-control form-control-sm" id="autoAdvanceInterval" 
                                                   @bind="autoAdvanceIntervalSeconds" min="1" max="60" step="1" />
                                        </div>
                                        <div class="col-md-6">
                                            <label for="autoAdvanceDirection" class="form-label">Direction</label>
                                            <select class="form-select form-select-sm" id="autoAdvanceDirection" @bind="autoAdvanceDirection">
                                                <option value="forward">Forward</option>
                                                <option value="reverse">Reverse</option>
                                            </select>
                                        </div>
                                    </div>
                                    <div class="mt-3 d-flex gap-2">
                                        @if (!isAutoAdvancing)
                                        {
                                            <button class="btn btn-sm btn-success" @onclick="StartAutoAdvance">
                                                <i class="bi bi-play-fill"></i> Start Auto
                                            </button>
                                        }
                                        else
                                        {
                                            @if (isAutoAdvancePaused)
                                            {
                                                <button class="btn btn-sm btn-warning" @onclick="ResumeAutoAdvance">
                                                    <i class="bi bi-play-fill"></i> Resume Auto
                                                </button>
                                            }
                                            else
                                            {
                                                <button class="btn btn-sm btn-warning" @onclick="PauseAutoAdvance">
                                                    <i class="bi bi-pause-fill"></i> Pause Auto
                                                </button>
                                            }
                                            <button class="btn btn-sm btn-danger" @onclick="StopAutoAdvance">
                                                <i class="bi bi-stop-fill"></i> Stop Auto
                                            </button>
                                        }
                                    </div>
                                    @if (isAutoAdvancing)
                                    {
                                        <div class="mt-2">
                                            <small class="text-muted">
                                                Auto-advancing @autoAdvanceDirection every @autoAdvanceIntervalSeconds seconds
                                                @if (isAutoAdvancePaused) { <span class="text-warning">(Paused)</span> }
                                            </small>
                                        </div>
                                    }
                                </div>

                                <!-- Manual navigation -->
                                <div class="d-flex justify-content-between mt-3">
                                    <button class="btn btn-sm btn-outline-primary" @onclick="PreviousPoint" disabled="@(currentPointIndex <= 0)">
                                        ‚Üê Previous
                                    </button>
                                    <button class="btn btn-sm btn-outline-primary" @onclick="NextPoint" disabled="@(currentPointIndex >= currentRoute.Points.Count - 1)">
                                        Next ‚Üí
                                    </button>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
        </div>

        <div class="@(isRouteManagementCollapsed ? "col-md-11" : "col-md-8")">
            @if (currentRoute != null && currentRoute.Points.Any())
            {
                var currentPoint = isNavigating ? currentRoute.Points[currentPointIndex] : currentRoute.StartPoint!;
                var heading = isNavigating && currentPointIndex < currentRoute.Points.Count - 1 
                    ? StreetViewService.CalculateBearing(
                        currentPoint.Latitude, currentPoint.Longitude,
                        currentRoute.Points[currentPointIndex + 1].Latitude, currentRoute.Points[currentPointIndex + 1].Longitude)
                    : 0;

                <div class="card">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6>Street View</h6>
                        <div>
                            @if (isNavigating)
                            {
                                <span class="badge bg-success">Point @(currentPointIndex + 1) of @currentRoute.Points.Count</span>
                                @if (currentPointIndex > 0)
                                {
                                    var currentNavPoint = currentRoute.Points[currentPointIndex];
                                    var previousNavPoint = currentRoute.Points[currentPointIndex - 1];
                                    var stepDistance = CalculateStepDistance(previousNavPoint.Latitude, previousNavPoint.Longitude, currentNavPoint.Latitude, currentNavPoint.Longitude);
                                    <span class="badge bg-secondary ms-1">Step: @(stepDistance.ToString("F1"))m</span>
                                }
                            }
                            <span class="badge bg-info">@currentPoint.Latitude.ToString("F6"), @currentPoint.Longitude.ToString("F6")</span>
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @{
                            var streetViewUrl = StreetViewService.GetStreetViewEmbedUrl(currentPoint.Latitude, currentPoint.Longitude, heading);
                        }
                        
                        @if (!string.IsNullOrEmpty(streetViewUrl))
                        {
                            <div class="position-relative">
                                <iframe src="@streetViewUrl" 
                                        width="100%" height="500" style="border:0;" 
                                        allowfullscreen="" loading="eager"
                                        allow="accelerometer; gyroscope; magnetometer"
                                        referrerpolicy="no-referrer-when-downgrade">
                                </iframe>
                            </div>
                            @if (showApiKeyError)
                            {
                                <div class="alert alert-warning m-3">
                                    <strong>Street View failed to load:</strong> @apiKeyStatusMessage
                                    <br><small>This may be due to:</small>
                                    <ul class="small mb-0 mt-2">
                                        <li>Maps Embed API not enabled in Google Cloud Console</li>
                                        <li>API key restrictions or insufficient permissions</li>
                                        <li>No Street View coverage at this location</li>
                                        <li>Network connectivity issues</li>
                                    </ul>
                                    <div class="mt-2">
                                        <a href="@StreetViewService.GetStreetViewUrl(currentPoint.Latitude, currentPoint.Longitude, heading)" 
                                           target="_blank" class="btn btn-sm btn-outline-primary">
                                            <i class="bi bi-box-arrow-up-right"></i> Open in Google Maps
                                        </a>
                                    </div>
                                </div>
                            }
                        }
                        else
                        {
                            <div class="text-center p-5">
                                @if (isValidatingApiKey)
                                {
                                    <div class="spinner-border text-primary mb-3" role="status">
                                        <span class="visually-hidden">Validating API key...</span>
                                    </div>
                                    <h5 class="text-muted mb-3">Validating API Key...</h5>
                                }
                                else
                                {
                                    <h5 class="text-muted mb-3">Street View Not Available</h5>
                                    <div class="alert alert-warning text-start">
                                        <strong>API Key Status:</strong> @apiKeyStatusMessage
                                    </div>
                                    
                                    @if (!StreetViewService.HasApiKey)
                                    {
                                        <p class="text-muted mb-3">
                                            To view Street View, you need a Google Maps API key. 
                                            <br>Add it to your appsettings.json file under "GoogleMaps:ApiKey".
                                        </p>
                                    }
                                    else
                                    {
                                        <p class="text-muted mb-3">
                                            Your API key appears to be invalid or doesn't have the required permissions.
                                            <br>Please check your Google Cloud Console settings and ensure the Maps Embed API is enabled.
                                        </p>
                                        <button class="btn btn-outline-primary btn-sm mb-3" @onclick="ValidateApiKey">
                                            <i class="bi bi-arrow-clockwise"></i> Re-validate API Key
                                        </button>
                                    }
                                }
                                
                                <p class="mb-3">
                                    <strong>Current Location:</strong><br>
                                    Latitude: @currentPoint.Latitude.ToString("F6")<br>
                                    Longitude: @currentPoint.Longitude.ToString("F6")
                                    @if (currentPoint.Elevation.HasValue)
                                    {
                                        <text><br>Elevation: @currentPoint.Elevation.Value.ToString("F1")m</text>
                                    }
                                </p>
                                <a href="@StreetViewService.GetStreetViewUrl(currentPoint.Latitude, currentPoint.Longitude, heading)" 
                                   target="_blank" class="btn btn-primary">
                                    <i class="bi bi-box-arrow-up-right"></i> Open in Google Maps
                                </a>
                            </div>
                        }
                    </div>
                </div>

                <!-- Google Maps Route Overview -->
                <div class="card mt-3">
                    <div class="card-header d-flex justify-content-between align-items-center">
                        <h6>Route Overview</h6>
                        <div>
                            @if (GoogleMapsService.HasApiKey)
                            {
                                <span class="badge bg-success">API Key: Valid</span>
                                @if (isMapInitialized)
                                {
                                    <span class="badge bg-success ms-1">Map: Ready</span>
                                }
                                else if (isMapLoading)
                                {
                                    <span class="badge bg-warning ms-1">Map: Loading...</span>
                                }
                                else
                                {
                                    <span class="badge bg-secondary ms-1">Map: Not Initialized</span>
                                }
                            }
                            else
                            {
                                <span class="badge bg-danger">API Key: Missing</span>
                            }
                        </div>
                    </div>
                    <div class="card-body p-0">
                        @if (GoogleMapsService.HasApiKey)
                        {
                            <div class="position-relative">
                                @if (isMapLoading)
                                {
                                    <div class="position-absolute w-100 h-100 d-flex align-items-center justify-content-center bg-light" 
                                         style="height: 400px; z-index: 10;">
                                        <div class="text-center">
                                            <div class="spinner-border text-primary mb-2" role="status">
                                                <span class="visually-hidden">Loading Map...</span>
                                            </div>
                                            <p class="text-muted mb-0">Loading Route Map...</p>
                                        </div>
                                    </div>
                                }
                                <div id="routeMap" style="height: 400px; width: 100%;"></div>
                            </div>
                        }
                        else
                        {
                            <div class="text-center p-4" style="background-color: #f8f9fa; border: 2px dashed #dee2e6; min-height: 200px;">
                                <h6 class="text-muted mb-3">üó∫Ô∏è Map Not Available</h6>
                                <div class="alert alert-warning text-start">
                                    <strong>Google Maps API Key Required:</strong> @GoogleMapsService.GetApiKeyStatus()
                                </div>
                                <div class="text-muted mb-3">
                                    <p class="mb-2">
                                        <strong>To enable the interactive route map:</strong>
                                    </p>
                                    <ol class="text-start small">
                                        <li>Get a Google Maps API key from <a href="https://console.cloud.google.com/" target="_blank">Google Cloud Console</a></li>
                                        <li>Enable "Maps JavaScript API" and "Maps Embed API"</li>
                                        <li>Add the key to appsettings.json under "GoogleMaps:ApiKey"</li>
                                        <li>Restart the application</li>
                                    </ol>
                                </div>
                                @if (currentRoute?.StartPoint != null && currentRoute?.EndPoint != null)
                                {
                                    <div class="text-start">
                                        <p class="mb-2">
                                            <strong>Route Information:</strong><br>
                                            <strong>Start:</strong> @currentRoute.StartPoint.ToString()<br>
                                            <strong>End:</strong> @currentRoute.EndPoint.ToString()
                                        </p>
                                    </div>
                                }
                                <div class="mt-3">
                                    <small class="text-muted">
                                        Once configured, this area will show an interactive map with your route path and current position marker.
                                    </small>
                                </div>
                            </div>
                        }
                    </div>
                </div>
            }
            else
            {
                <div class="card">
                    <div class="card-body text-center">
                        <h5 class="text-muted">No Route Loaded</h5>
                        <p class="text-muted">Upload a GPX file to get started with route navigation.</p>
                    </div>
                </div>
            }
        </div>
    </div>
</div>

@code {
    private List<CycleRoute> savedRoutes = new();
    private CycleRoute? currentRoute;
    private bool isLoading;
    private string statusMessage = string.Empty;
    private bool isNavigating;
    private int currentPointIndex;
    private Timer? navigationTimer;
    private bool isValidatingApiKey;
    private string apiKeyStatusMessage = string.Empty;
    private bool showApiKeyError;
    private bool isRouteManagementCollapsed = false;

    // Google Maps functionality
    private bool isMapLoading = true;
    private bool isMapInitialized = false;

    // Auto-advance functionality
    private bool isAutoAdvancing;
    private bool isAutoAdvancePaused;
    private int autoAdvanceIntervalSeconds = 3;
    private string autoAdvanceDirection = "forward";
    private Timer? autoAdvanceTimer;

    protected override async Task OnInitializedAsync()
    {
        RouteService.CurrentRouteChanged += OnCurrentRouteChanged;
        savedRoutes = await RouteService.GetSavedRoutesAsync();
        currentRoute = RouteService.CurrentRoute;
        
        // For WebAssembly, call ValidateApiKeyAsync which will ensure configuration is loaded
        await GoogleMapsService.ValidateApiKeyAsync();
        
        await UpdateApiKeyStatus();
        
        // Initialize map if we already have a route loaded
        if (currentRoute != null)
        {
            await InitializeMap();
        }
    }

    private async Task UpdateApiKeyStatus()
    {
        apiKeyStatusMessage = StreetViewService.GetApiKeyStatus();
        if (StreetViewService.HasApiKey)
        {
            isValidatingApiKey = true;
            StateHasChanged();
            
            var isValid = await StreetViewService.ValidateApiKeyAsync();
            apiKeyStatusMessage = StreetViewService.GetApiKeyStatus();
            
            isValidatingApiKey = false;
            StateHasChanged();
        }
    }

    private async Task ValidateApiKey()
    {
        await UpdateApiKeyStatus();
    }

    private async Task InitializeMap()
    {
        if (currentRoute == null)
        {
            Console.WriteLine("Cannot initialize map - missing route");
            return;
        }

        try
        {
            Console.WriteLine("Starting map initialization...");
            isMapLoading = true;
            StateHasChanged();

            // For WebAssembly, ensure we load configuration first by calling ValidateApiKeyAsync
            // which internally calls EnsureConfigurationLoadedAsync
            if (!GoogleMapsService.HasApiKey)
            {
                Console.WriteLine("No API key available, attempting to load configuration...");
                await GoogleMapsService.ValidateApiKeyAsync();
            }

            // Check if we have API key after potential loading
            if (!GoogleMapsService.HasApiKey)
            {
                Console.WriteLine("Cannot initialize map - missing API key after configuration attempt");
                isMapLoading = false;
                StateHasChanged();
                return;
            }

            // Ensure the map container exists
            var mapExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('routeMap') !== null");
            if (!mapExists)
            {
                Console.WriteLine("Map container not found, waiting...");
                await Task.Delay(1000);
                mapExists = await JSRuntime.InvokeAsync<bool>("eval", "document.getElementById('routeMap') !== null");
                if (!mapExists)
                {
                    Console.WriteLine("Map container still not found after delay");
                    isMapLoading = false;
                    StateHasChanged();
                    return;
                }
            }

            Console.WriteLine("Map container found, proceeding with initialization...");

            // Set up the map initialization function first
            Console.WriteLine("Setting up map initialization function...");
            var mapScript = GoogleMapsService.GenerateMapInitializationScript(currentRoute, "routeMap", currentPointIndex);
            
            // Define the callback function that the Google Maps API will call
            await JSRuntime.InvokeVoidAsync("eval", $@"
                window.initGoogleMaps = function() {{
                    console.log('Google Maps API callback triggered');
                    window.googleMapsApiLoaded = true;
                    // Initialize the route map
                    try {{
                        {mapScript}
                        console.log('Route map initialized successfully');
                    }} catch (error) {{
                        console.error('Error initializing route map:', error);
                    }}
                }};
            ");

            // Load the Google Maps API if not already loaded
            if (!isMapInitialized)
            {
                Console.WriteLine("Loading Google Maps API...");
                var script = $@"
                    console.log('Checking if Google Maps API is loaded...');
                    if (!window.googleMapsApiLoaded) {{
                        console.log('Loading Google Maps API script...');
                        const script = document.createElement('script');
                        script.src = '{GoogleMapsService.GetMapsApiUrl()}';
                        script.async = true;
                        script.defer = true;
                        script.onerror = function() {{
                            console.error('Failed to load Google Maps API');
                        }};
                        document.head.appendChild(script);
                    }} else {{
                        console.log('Google Maps API already loaded, initializing map...');
                        if (window.initGoogleMaps) {{
                            window.initGoogleMaps();
                        }}
                    }}
                ";

                await JSRuntime.InvokeVoidAsync("eval", script);
            }
            
            // If API is already loaded, call the callback immediately
            await JSRuntime.InvokeVoidAsync("eval", @"
                if (window.googleMapsApiLoaded && typeof google !== 'undefined') {
                    console.log('Google Maps API already ready, calling callback immediately...');
                    window.initGoogleMaps();
                } else {
                    console.log('Waiting for Google Maps API to load...');
                }
            ");

            isMapInitialized = true;
            
            // Give it a moment to initialize
            await Task.Delay(2000);
            
            isMapLoading = false;
            StateHasChanged();
            Console.WriteLine("Map initialization completed");
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error initializing map: {ex.Message}");
            isMapLoading = false;
            StateHasChanged();
        }
    }

    private async Task UpdateMapPosition()
    {
        if (currentRoute == null || !GoogleMapsService.HasApiKey || !isMapInitialized)
            return;

        try
        {
            var currentPoint = currentRoute.Points[currentPointIndex];
            var updateScript = GoogleMapsService.GenerateUpdatePositionScript(currentPoint, "routeMap");
            await JSRuntime.InvokeVoidAsync("eval", updateScript);
        }
        catch (Exception ex)
        {
            Console.WriteLine($"Error updating map position: {ex.Message}");
        }
    }

    private void ToggleRouteManagement()
    {
        isRouteManagementCollapsed = !isRouteManagementCollapsed;
    }

    private void OnCurrentRouteChanged(CycleRoute? route)
    {
        currentRoute = route;
        isNavigating = false;
        currentPointIndex = 0;
        showApiKeyError = false;
        isMapLoading = true;
        isMapInitialized = false;
        StopAutoAdvance();
        
        InvokeAsync(async () =>
        {
            StateHasChanged();
            if (currentRoute != null && GoogleMapsService.HasApiKey)
            {
                // Add a small delay to ensure the DOM is ready
                await Task.Delay(500);
                await InitializeMap();
            }
        });
    }

    private async Task OnFileSelected(InputFileChangeEventArgs e)
    {
        var file = e.File;
        if (file == null) return;

        isLoading = true;
        statusMessage = string.Empty;
        StateHasChanged();

        try
        {
            using var stream = file.OpenReadStream(maxAllowedSize: 10 * 1024 * 1024); // 10MB limit
            var route = await RouteService.LoadRouteFromGpxAsync(stream, file.Name);

            if (route != null)
            {
                await RouteService.SaveRouteAsync(route);
                RouteService.SetCurrentRoute(route);
                savedRoutes = await RouteService.GetSavedRoutesAsync();
                statusMessage = $"Successfully loaded route '{route.Name}' with {route.Points.Count} points.";
            }
            else
            {
                statusMessage = "Error: Could not load route from the selected file.";
            }
        }
        catch (Exception ex)
        {
            statusMessage = $"Error loading file: {ex.Message}";
        }
        finally
        {
            isLoading = false;
            StateHasChanged();
        }
    }

    private void LoadRoute(CycleRoute route)
    {
        RouteService.SetCurrentRoute(route);
        statusMessage = $"Loaded route '{route.Name}'";
    }

    private async Task DeleteRoute(string routeName)
    {
        await RouteService.DeleteRouteAsync(routeName);
        savedRoutes = await RouteService.GetSavedRoutesAsync();
        statusMessage = $"Deleted route '{routeName}'";
        StateHasChanged();
    }

    private void StartRoute()
    {
        if (currentRoute == null || !currentRoute.Points.Any()) return;

        isNavigating = true;
        currentPointIndex = 0;
        StateHasChanged();
    }

    private void StopRoute()
    {
        isNavigating = false;
        StopAutoAdvance();
        navigationTimer?.Dispose();
        StateHasChanged();
    }

    private void StartAutoAdvance()
    {
        if (currentRoute == null || !currentRoute.Points.Any()) return;

        isAutoAdvancing = true;
        isAutoAdvancePaused = false;
        CreateAutoAdvanceTimer();
        StateHasChanged();
    }

    private void PauseAutoAdvance()
    {
        isAutoAdvancePaused = true;
        autoAdvanceTimer?.Dispose();
        StateHasChanged();
    }

    private void ResumeAutoAdvance()
    {
        isAutoAdvancePaused = false;
        CreateAutoAdvanceTimer();
        StateHasChanged();
    }

    private void StopAutoAdvance()
    {
        isAutoAdvancing = false;
        isAutoAdvancePaused = false;
        autoAdvanceTimer?.Dispose();
        StateHasChanged();
    }

    private void CreateAutoAdvanceTimer()
    {
        autoAdvanceTimer?.Dispose();
        autoAdvanceTimer = new Timer(AutoAdvanceCallback, null, 
            TimeSpan.FromSeconds(autoAdvanceIntervalSeconds), 
            TimeSpan.FromSeconds(autoAdvanceIntervalSeconds));
    }

    private void AutoAdvanceCallback(object? state)
    {
        if (!isAutoAdvancing || isAutoAdvancePaused || currentRoute == null)
            return;

        InvokeAsync(() =>
        {
            if (autoAdvanceDirection == "forward")
            {
                if (currentPointIndex < currentRoute.Points.Count - 1)
                {
                    NextPoint();
                }
                else
                {
                    // Reached the end, stop auto-advance
                    StopAutoAdvance();
                }
            }
            else // reverse
            {
                if (currentPointIndex > 0)
                {
                    PreviousPoint();
                }
                else
                {
                    // Reached the beginning, stop auto-advance
                    StopAutoAdvance();
                }
            }
        });
    }

    private async void NextPoint()
    {
        if (currentRoute != null && currentPointIndex < currentRoute.Points.Count - 1)
        {
            currentPointIndex++;
            StateHasChanged();
            await UpdateMapPosition();
        }
    }

    private async void PreviousPoint()
    {
        if (currentPointIndex > 0)
        {
            currentPointIndex--;
            StateHasChanged();
            await UpdateMapPosition();
        }
    }

    private async Task OnProgressBarClick(MouseEventArgs e)
    {
        if (currentRoute == null || !isNavigating) return;

        try
        {
            // Calculate the clicked percentage based on the click position
            var clickPercentage = await JSRuntime.InvokeAsync<double>("calculateClickPercentage", e, "clickable-progress");
            
            if (clickPercentage >= 0 && clickPercentage <= 1)
            {
                // Calculate the target point index based on the clicked percentage
                var targetIndex = (int)Math.Round(clickPercentage * (currentRoute.Points.Count - 1));
                
                // Ensure the index is within bounds
                targetIndex = Math.Max(0, Math.Min(targetIndex, currentRoute.Points.Count - 1));
                
                // Jump to the selected point
                if (targetIndex != currentPointIndex)
                {
                    currentPointIndex = targetIndex;
                    StateHasChanged();
                    await UpdateMapPosition();
                }
            }
        }
        catch (Exception ex)
        {
            // Handle any JavaScript errors gracefully
            Console.WriteLine($"Error handling progress bar click: {ex.Message}");
        }
    }

    private double CalculateStepDistance(double lat1, double lon1, double lat2, double lon2)
    {
        // Haversine formula to calculate distance between two points on Earth
        const double R = 6371000; // Earth's radius in meters
        var dLat = ToRadians(lat2 - lat1);
        var dLon = ToRadians(lon2 - lon1);
        var a = Math.Sin(dLat / 2) * Math.Sin(dLat / 2) +
                Math.Cos(ToRadians(lat1)) * Math.Cos(ToRadians(lat2)) *
                Math.Sin(dLon / 2) * Math.Sin(dLon / 2);
        var c = 2 * Math.Atan2(Math.Sqrt(a), Math.Sqrt(1 - a));
        return R * c; // Distance in meters
    }

    private static double ToRadians(double degrees) => degrees * Math.PI / 180;

    public void Dispose()
    {
        RouteService.CurrentRouteChanged -= OnCurrentRouteChanged;
        navigationTimer?.Dispose();
        autoAdvanceTimer?.Dispose();
    }
}
