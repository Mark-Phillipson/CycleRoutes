@inherits LayoutComponentBase
@inject NavigationManager Navigation
@inject IThemeService ThemeService
@implements IDisposable

<div class="page">
    <main>
        <div class="top-row px-4">
            <div class="nav-links">
                <a href="/" class="nav-link @(IsActive("/") ? "active" : "")">Home</a>
                <a href="/routes" class="nav-link @(IsActive("/routes") ? "active" : "")">Routes</a>
            </div>
            <div class="app-info">
                <button class="theme-toggle" @onclick="ToggleTheme" title="@(ThemeService.IsDarkMode ? "Switch to light mode" : "Switch to dark mode")">
                    @if (ThemeService.IsDarkMode)
                    {
                        <span class="theme-icon">☀️</span>
                    }
                    else
                    {
                        <span class="theme-icon">🌙</span>
                    }
                </button>
                <span class="app-title">CycleRoutes</span>
            </div>
        </div>

        <article class="content px-4">
            @Body
        </article>
    </main>
</div>

<div id="blazor-error-ui" data-nosnippet>
    An unhandled error has occurred.
    <a href="." class="reload">Reload</a>
    <span class="dismiss">🗙</span>
</div>

@code {
    protected override async Task OnInitializedAsync()
    {
        await ThemeService.InitializeAsync();
        ThemeService.ThemeChanged += OnThemeChanged;
    }

    private void OnThemeChanged()
    {
        InvokeAsync(StateHasChanged);
    }

    private async Task ToggleTheme()
    {
        await ThemeService.ToggleThemeAsync();
    }

    private bool IsActive(string path)
    {
        var currentPath = new Uri(Navigation.Uri).AbsolutePath;
        if (path == "/")
        {
            return currentPath == "/";
        }
        return currentPath.StartsWith(path, StringComparison.OrdinalIgnoreCase);
    }

    public void Dispose()
    {
        ThemeService.ThemeChanged -= OnThemeChanged;
    }
}
